package gui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import obj.Card;
import obj.Move;
import obj.Player;

import common.Constants;

import connectivity.Server;

/**
 * GUI representation of players window. Allows player to see his/hers card,
 * points and to play a game.
 * 
 * @author ajla.eltabari
 *
 */
public class PlayerWindow extends JFrame {
	private static final long serialVersionUID = -3135347825165707732L;
	private static Map<Integer, BufferedImage> cards = new HashMap<>();
	private static ArrayList<Card> hand = new ArrayList<>();

	// Panels
	private JPanel pnlMain = new JPanel();
	private JPanel pnlHeader = new JPanel();
	private JPanel pnlHand = new JPanel();
	private JPanel pnlScores = new JPanel();
	private ImagePanel imgPnlBunnies = new ImagePanel();

	// Buttons
	private JButton btnNickname = new JButton();
	private JButton btnDraw = new JButton("Draw");

	// BufferedImage
	private BufferedImage imgBunnies;

	/**
	 * Constructor that makes Players window for DiXit game.
	 */
	public PlayerWindow(ArrayList<Integer> cardsIds, String nickname) {
		System.out.println("player window");
		// Loading all images to the map
		HelperMethods.loadCardImages(cards);
		System.out.println(cards);
		
		// Buttons settings
		btnNickname.setPreferredSize(new Dimension(124, 100));
		btnDraw.setPreferredSize(new Dimension(124, 100));
		
		// Setting button text to the actual nickname
		btnNickname.setText(nickname);
		
		// Panels Layouts
		pnlMain.setLayout(new BorderLayout());
		pnlHeader.setLayout(new BorderLayout());
		pnlHand.setLayout(new FlowLayout());

		// Main panel
		pnlMain.add(pnlHeader, BorderLayout.NORTH);
		pnlMain.add(pnlHand, BorderLayout.SOUTH);
		pnlMain.add(pnlScores, BorderLayout.CENTER);

		// Header panel
		pnlHeader.add(btnNickname, BorderLayout.WEST);
		pnlHeader.add(btnDraw, BorderLayout.EAST);
		pnlHeader.add(imgPnlBunnies, BorderLayout.CENTER);

		// Hand panel

		// Loading first HAND_SIZE cards to the hand.
		for (int i = 0; i < cardsIds.size(); i++) {
			JButton btnCard = new JButton();
			BufferedImage buttonIcon;
			btnCard.setBorder(BorderFactory.createEmptyBorder());
			btnCard.setContentAreaFilled(false);

			buttonIcon = cards.get(cardsIds.get(i));
			btnCard = new JButton(new ImageIcon(buttonIcon));
			
			Card currentCard = new Card(i, cards.get(cardsIds.get(i)));
			hand.add(currentCard);
			
			btnCard.addMouseListener(new MouseAdapter() {

				public void mouseClicked(MouseEvent arg0) {
					for (int i = 0; i < Server.playerList.size(); i++) {
						Player player = Server.playerList.get(i);
						System.out.println(player.getNickname().equals(nickname));
						if (player.getNickname().equals(nickname)) {
							if (player.isCurrentPlayer()) {
								Server.moves.add(new Move(currentCard, player));
								
								new Association();
							}
						}
					}	
				}				
			});

			pnlHand.add(btnCard);
		}

		// Scores panel

		// Frame visual settings
		add(pnlMain);
		setTitle("DiXit");
		setSize(Constants.PNL_MAIN_HEIGHT, Constants.PNL_MAIN_WIDTH);
		setLocationRelativeTo(null);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setVisible(true);
	}

	public class ImagePanel extends JPanel {
		private static final long serialVersionUID = 221227307122900452L;

		public ImagePanel() {
			try {
				imgBunnies = ImageIO.read(new File(Constants.BUNNIES_PATH));
			} catch (IOException ex) {
				JOptionPane error = new JOptionPane(
						"Could not find or open desired file.",
						JOptionPane.ERROR_MESSAGE);
				error.createDialog("Error").setVisible(true);
			}
		}

		@Override
		protected void paintComponent(Graphics g) {
			super.paintComponent(g);
			g.drawImage(imgBunnies, 0, 0, null);
		}

	}

	public static void main(String[] args) {
		// new PlayerWindow();
	}
}